#!/bin/sh /etc/rc.common

START=99
STOP=99

USE_PROCD=1

REQUIRED_PACKAGES="kmod-sched ip-full kmod-veth tc-full kmod-netem kmod-sched-ctinfo kmod-ifb kmod-sched-cake"
SCRIPT_URL="https://raw.githubusercontent.com/hudra0/qosmate/main/etc/qosmate.sh"
HOTPLUG_SCRIPT_URL="https://raw.githubusercontent.com/hudra0/qosmate/main/etc/hotplug.d/iface/13-qosmateHotplug"

service_triggers() {
    procd_add_reload_trigger "network"
    procd_add_reload_trigger "firewall"
}

load_config() {
    config_load 'qosmate'
    config_get WAN settings 'WAN' 'eth1'
}

install_packages() {
    # Flag to indicate if opkg update is needed
    need_update=0

    # Check if any packages are missing
    for pkg in $REQUIRED_PACKAGES; do
        if ! opkg list-installed | grep -q "^$pkg "; then
            echo "$pkg is not installed."
            need_update=1
            break
        fi
    done

    # Run opkg update if at least one package is missing
    if [ "$need_update" -eq 1 ]; then
        echo "Updating opkg list..."
        opkg update
    fi

    # Install missing packages
    for pkg in $REQUIRED_PACKAGES; do
        if ! opkg list-installed | grep -q "^$pkg "; then
            echo "Installing $pkg..."
            opkg install "$pkg" || {
                echo "Failed to install $pkg."
                return 1 # Abort if the installation fails
            }
        fi
    done
}

download_scripts() {
    [ ! -f /etc/qosmate.sh ] && wget -O /etc/qosmate.sh $SCRIPT_URL && chmod a+x /etc/qosmate.sh
    [ ! -f /etc/hotplug.d/iface/13-qosmateHotplug ] && wget -O /etc/hotplug.d/iface/13-qosmateHotplug $HOTPLUG_SCRIPT_URL
    
    # Create the directory for tc-Netem distributions if it does not exist
    mkdir -p /usr/lib/tc

    # Base URL for the repository
    DIST_URL="https://raw.githubusercontent.com/hudra0/qosmate/main/usr/lib/tc"

    # List of files
    DIST_FILES="experimental.dist normal.dist normmix20-64.dist pareto.dist paretonormal.dist"

    # Iterate through the list and download each file
    for FILE in $DIST_FILES; do
        if [ ! -f "/usr/lib/tc/$FILE" ]; then
            echo "Downloading $FILE..."
            wget -O "/usr/lib/tc/$FILE" "$DIST_URL/$FILE" || echo "Error downloading $FILE"
        fi
    done
}

migrate_config() {
    CONFIG_FILE="/etc/config/qosmate"

    # Function to add the global enabled option if it does not exist
    if ! grep -q "config global 'global'" $CONFIG_FILE; then
        echo "Adding global configuration section..."
        sed -i '1i\
config global '\''global'\''\n    option enabled '\''1'\''\n' $CONFIG_FILE
        echo "Global configuration section added."
    else
        echo "Global configuration section already exists."
    fi

    # Ensure the enabled option is present in the global section
    if ! grep -q "option enabled" $CONFIG_FILE; then
        echo "Adding enabled option to global section..."
        sed -i "/config global 'global'/a\\
    option enabled '1'
" $CONFIG_FILE
        echo "Enabled option added."
    else
        echo "Enabled option already exists."
    fi
}

start_service() {
    install_packages
    download_scripts
    migrate_config    
    /etc/qosmate.sh    
    /etc/init.d/firewall reload
    sed -i "s/\(option enabled\).*/\1 '1'/" /etc/config/qosmate
    echo "Service started" | logger -t qosmate    
    /etc/init.d/qosmate enable     
}

stop_service() {
    load_config    
    echo "Stopping service qosmate..."
    /etc/init.d/qosmate disable
    sed -i "s/\(option enabled\).*/\1 '0'/" /etc/config/qosmate
    ## Delete files
    rm -f /etc/hotplug.d/iface/13-qosmateHotplug
    rm -f /usr/share/nftables.d/ruleset-post/dscptag.nft

    ## Delete the old qdiscs created by the script
    tc qdisc del dev $WAN root > /dev/null 2>&1
    tc qdisc del dev ifb-$WAN root > /dev/null 2>&1
    tc qdisc del dev $WAN ingress > /dev/null 2>&1 

    # Remove IFB interface
    ip link del ifb-$WAN 2>/dev/null

    nft delete table inet dscptag

    echo "Reloading network service..."
    /etc/init.d/network reload
    /etc/init.d/firewall reload
    echo "Service stopped" | logger -t qosmate     
    exit 0
}

status_service() {
    echo "==== Traffic Control (tc) Queues ===="
    tc -s qdisc

    echo
    echo "==== Nftables Ruleset: dscptag ===="
    nft list ruleset | grep 'chain dscptag' -A 100
}

restart() {
    /etc/init.d/qosmate stop
    sleep 1 # Ensure all processes have been properly terminated
    /etc/init.d/qosmate start    
}

reload_service() {
    restart
}
